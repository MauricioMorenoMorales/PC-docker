docker --version {Ve la versión de docker}
docker info {obten la informacion de el estado de docker}

Puedes usar la página de play-with-docker para practicar

cheatsheet < https://collectednotes.com/barckcode/docker-cheat-sheet >

docker run { crea un contenedor y lo ejecuta }

docker run hello-world { corre el contenedor llamado hello-world }

-> docker ps { muestra los contenedores corriendo }
-> docker ps -a { muestra todos los contenedores corriendo }
-> docker inspect <id de el proceso> { muestra toda la especificacion de el contenedor }

-> docker run --name <nombre personalizado> <contenedor a ejecutar> {agrega nombres personalizados a los procesos}
-> docker rename <nombre antiguo> <number nuevo>

-> docker rm <nombre de el contenedor> { Elimina un contenedor en especifico}
-> docker container prune { elimina todos los contenedores }

[[[ El modo interactivo ]]]

-> docker run ubuntu {corre el sistema operativo de ubuntu pero no funcionará y se apagará }
esto dará como respuesta algo así

CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS                      PORTS     NAMES
37ec385d58b3   ubuntu    "/bin/bash"   20 seconds ago   Exited (0) 18 seconds ago             zen_heisenberg

=>> COMMAND = El proceso que corre el contenedor al arrancar
=>> STATUS = Cuándo un proceso en linux termina devuelve un codigo de salida (0) significa que todo bien, cualquier numero distinto a 0 significa error

El contenedor se apago por que el comando terminó, ya que el shell no posee ninguna instruccion a hacer

-> docker run -it ubuntu { inicia el modo interactivo de docker esto hará que ubuntu trabaje como una consola}
- ls -lac {una forma alternativa de ver los directorios}

-> exit {al hacer esto el modo interactivo se cerrará y se detendrá el contenedor }

[[[El ciclo de vida de un contenedor]]]

cuando un contenedor se ejecuta, en realidad se hace un proceso de el sistema operativo el "Main Process" los contenedores corren siempre que su proceso principal esté corriendo
cuándo hacemos exit apagamos el proceso principal y el contenedor se detiene
pueden detenerse otros procesos y seguirá corriendo, el único que detendra todo es el proceso principal

para evitar que se apague el contenedor tenemos que iniciar el contenedor y darle un proceso principal que nose apague

-> docker run --name alwaysup -d ubuntu -f /dev/null {esto dará como resultado esto}

CONTAINER ID   IMAGE     COMMAND               CREATED          STATUS          PORTS     NAMES
e780e564148c   ubuntu    "tail -f /dev/null"   12 seconds ago   Up 11 seconds             alwaysup

cuando corres un contenedor al final especificas el comando que quieres que corra

-> docker run --name alwaysup -d ubuntu <el comando que quieres que corra>

-> docker exec {nos permite ejecutar un proceso en un contenedor que esté corriendo}
-> docker exec -it alwaysup bash { inicia bash en el contenedor alwaysup}
- ps muestra los procesos en ubuntu
- ps -aux { muestra todos los procesos de ubuntu }

-> docker inspect --format '{{.State.Pid}}' alwaysup {[ muestra el id de el rpoceso principal de docker]}
- sudo kill -9 <pid> {elimina el proceso desde tu consola principal}

[[ Exponiendo contenedores ]] { Como acceder a contenedores por un get en HTTP }

-> docker run -d --name proxy nginx [[ Corre un servidor de nginx ]]

CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS     NAMES
4b285549168d   nginx     "/docker-entrypoint.…"   29 seconds ago   Up 27 seconds   80/tcp    proxy

=> PORTS, te muestra que el servidor corre en el puerto 80 !DENTRO DE EL CONTENEDOR

-> docker stop <nombre de el contenedor> { detiene un servidor }
-> docker rm -f <nombre de el contenedor> { detiene y elimina un contenedor }

-> docker run --name <nombre> -p{publish} <puerto local>:<puerto contenedor> <nombre de la imagen> {Forma de exponer un puerto de el contenedor ejemplo abajo}
=> docker run --name proxy -p 8080:80 nginx
Al no agregar el "-d" tu estandard output será el de docker en este aso nginx y no será el de tu bash
Sí sales de tu standard input presionando ctrl+c ejecutara el comando en nginx cancelandolo matando el main process y después saldrá de el proceso mandandote a tu bash

El "-d" debe de estar al principio de el comando
-> docker run -d --name proxy -p 8080:80 nginx

-> docker logs <nombre de el contenedor> { te muestra los logs que ocurren dentro de el contenedor }
-> docker logs -f{follow} <nombre de el contendor> { contecta tu bash con la terminal de dentro de el contenedor }
Con el flag follow "-f" cuándo presiones ctrl+c no cancelara el contenedor ya que estaría cancelando el flag follow no el proceso principal

-> docker logs --tail 10 -f <nombre de el contendor> { muestra solo los ultimos 10 logs }

[[ Bind mounts ]] {Te permite que un contenedor use partes de tu sistema operativo principal}
=> Crea un contenedor con mongo y nombre db y entra a él con
-> Docker exec -it db bash

-> docker run -d --name -db -v(bind mount) <PATH|PWD> <imagen> {Crea una ubicación para guardar los datos de mongodob un ejemplo sería }
-> docker run -d --name db -v /home/mauricio/Programacion/backend/docker/dockerdata/mongodata:/data/db mongo

[[ Volumanes ]] {La forma más comun de compartir data}

-> docker volume ls {Te muestra todos los volumenes existentes} "Al principio habŕa varios creados por default por docker"
-> docker volume create <nombre de el volumen> { crea un volumen}
-> docker run -d --name db --mount src=<nombre de el volumen a usar>,dst=<en donde estará montado> mongo
-> docker run -d --name db --mount src=dbdata,dst=/data/db mongo
con inspect puedes ver la información del contenedor en el objeto mount
-> docker exec -it db bash


[[ Insertar y extraer archivos dentro de un contenedor ]]

no necesitas que esté corriendo el contenedor para extraer o agregar información

$ touch prueba.txt (creo un archivo en mi máquina)
$ docker run -d --name copytest ubuntu tail -f /dev/null (corron un ubuntu y le agrego el tail para que quede activo)
$ docker exec -it copytest bash (entro al contenedor)
$ mkdir testing (creo un directorio en el contenedor)
$ docker cp prueba.txt copytest:/testing/test.txt (copio el archivo dentro del contenedor)
$ docker cp copytest:/testing localtesting (copio el directorio de un contenedor a mi máquina)
con “docker cp” no hace falta que el contenedor esté corriendo

-> docker cp <origen, o archivo a copiar> <contenedor que recibirá la copia>:<directorio que recibira la copia>
-> docker cp <contenedor de el que se copiará algo>:<directorio dentro de el contenedor> <nombre de el archivo que pondremos en nuestro OS>

Host: Donde Docker esta instalado.
Bind Mount: Guarda los archivos en la maquina local persistiendo y visualizando estos datos (No seguro).
Volume: Guarda los archivos en el area de Docker donde Docker los administra (Seguro).
TMPFS Mount: Guarda los archivos temporalmente y persiste los datos en la memoria del contenedor, cuando muera sus datos mueren con el contenedor.

[[Imagenes docker]]
las imagenes son como clases que generan contenedores los cuales serían sus instancias

$ docker image ls (veo las imágenes que tengo localmente)
$ docker pull ubuntu:20.04 (bajo la imagen de ubuntu con una versión específica)

-> docker pull <imagen>:<versión>

[[Crear tus propias imagenes]]

$ mkdir imagenes (creo un directorio en mi máquina)
$ cd imagenes (entro al directorio)
$ touch Dockerfile (creo un Dockerfile)
$ code . (abro code en el direcotrio en el que estoy)

##Contenido del Dockerfile##
FROM ubuntu:latest
RUN touch /ust/src/hola-platzi.txt (comando a ejecutar en tiempo de build)
##fin##

$ docker build -t ubuntu:platzi . (creo una imagen con el contexto de build <directorio>)
$ docker run -it ubuntu:platzi (corro el contenedor con la nueva imagen)
$ docker login (me logueo en docker hub)
$ docker tag ubuntu:platzi miusuario/ubuntu:platzy (cambio el tag para poder subirla a mi docker hub)
$ docker push miusuario/ubuntu:platzi (publico la imagen a mi docker hub)

-> docker build -t <nombre de la imagen en la que se basara>:<tag que le daras a tu imagen> <contexto de build |.| >

las imagenes no son más que capas

cada run dentro de un docker file es una capa

-> docker history ubuntu:platzi { muestra cada una de las capas }

puedes usar la herramienta docker dive para poder leer mejor las capas de las imágenes

-> dive ubuntu:platzi

las capas van de arriba hacia abajo y son inmutables si creas algo y lo eliminas después ambos comandos siguen existiendo

cuándo un contenedor corre, corren todas las capas de la imagen

[[ Usando Docker para desarrollar aplicaciones ]]

-> docker build -t{tag} <nombre de el tag> <contexto de build>
->docker build -t platziapp .
=> -t agrega el tag platziapp a el contenedor

[[ Usando docker para desarrollar aplicaciones ]]

$ git clone https://github.com/platzi/docker
$ docker build platziapp . (creo la imagen local)
$ docker image ls (listo las imagenes locales)
$ docker run --rm -p 3000:3000 platziapp (creo el contenedor y cuando se detenga se borra, lo publica el puerto 3000)
$ docker ps (veo los contenedores activos)

-> docker run --rm -p 3000:3000 <nombre de la imagen> {El flag --rm elimina el contenedor una vez desactivado}

[[Aprovechando el caché de capas para estructurar correctamente tus imágenes]]

$ docker build platziapp . (creo la imagen local)
$ docker run --rm -p 3000:3000 -v pathlocal/index.js:pathcontenedor/index.js platziapp (corro un contenedor y monto el archivo index.js para que se actualice dinámicamente con nodemon que está declarado en mi Dockerfile)

Cuándo quieres volver a hacer build a un elemento docker vuelve a usar las herramientas que tenia antes para optimizar el espacio
el problema es que cuándo haces un cambio vuelve a instalar todo para ello tienes que estructurar todo el dockerfile de la mejor manera

para poder crear el contenedor una vez y que se actualice automaticamente tienes que hacer esto
|||
FROM node:12

COPY ["package.json", "package-lock.json", "/usr/src/"]

WORKDIR /usr/src

RUN npm install

COPY [".", "/usr/src/"]

EXPOSE 3000

CMD ["npx", "nodemon", "index.js]"
|/|

con el bindmount puedes tener tus archivos corriendo en tu computadora hacer cambios y en el contenedor todo se guardará

-> docker run --rm -p 3000:3000 -v /home/mauricio/Programacion/backend/docker/docker/usr/src platziapp

[[Comunicacion entre distintos contenedores]] {docker networking}
$ docker network ls (listo las redes)
$ docker network create --atachable plazinet (creo la red)
$ docker inspect plazinet (veo toda la definición de la red creada)
$ docker run -d --name db mongo (creo el contenedor de la BBDD)
$ docker network connect plazinet db (conecto el contenedor “db” a la red “platzinet”)
$ docker run -d -name app -p 3000:3000 --env MONGO_URL=mondodb://db:27017/test platzi (corro el contenedor “app” y le paso una variable)
$ docker network connect plazinet app (conecto el contenedor “app” a la red “plazinet”)

-> docker network ls {muestra las redes}
-> docker network create --atachable <nombre de la red> (creo la red)
-> docker network inspect <nombre de la red> {ve la información de la network}
$ docker network connect <network> <contenedor> (conecto el contenedor “db” a la red “platzinet”)
$ docker run -d -name app -p 3000:3000 --env MONGO_URL=mondodb://db:27017/test platziapp {corro el contenedor platziapp con el nombre app en el puerto 3000 y le agrego a el entorno de desarrollo la variable para conectar la base de datos}
=> MONGO_URL=mongodb://<el nombre de el contenedor>:<puerto de el contenedor>

[[ Docker-compose]]

version: "3.8" =>> Versión de el compose file obligatorio

services: =>> Los servicios que componen la aplicación osea cada uno de los componentes de la app aquí hay dos servicios app y db
  app: => generará el contenedor app
    image: platziapp => usará la imágen platziapp<imagen creada>
    environment: => creas las variables de entorno que usarás
      MONGO_URL: "mongodb://db:27017/test"
    depends_on: => este contenedor dependrá de el otro componente, por lo tanto tiene que ser creado antes el contenedor db
      - db
    ports: => Los puertos que usará el servicio
      - "3000:3000"

  db:
    image: mongo

=> Para ejecutar el archivo yml {docker compose} tienes que correr el comando
-> docker-compose up
o
-> docker-compose up -d
